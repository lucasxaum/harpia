#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Libraries
import gi
import sys
import argparse
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

from harpia.GUI.mainwindow import MainWindow


# ---------------------------------------------------
# --------HARPIA FRONTEND MAIN FUNCTION--------------
# ---------------------------------------------------

def main(argv):
    """
        The Harpia-Frontend class is where the main function starts the system.
        It initializes the interface.
    """

    reload(sys)
    sys.setdefaultencoding('utf8')

    # Initialize the Frontend
    win = MainWindow()
    win.show_all()

    # Parameter passing
    parser = argparse.ArgumentParser()
    parser.add_argument('file', default=[], nargs='*',
                        help="List of files to open")
    args = parser.parse_args()


#     ##-----------------------------------
#
#     if args.test:
#         print"====\t========  ===========\t ==========\t=====\n"
#
#     for key in System.blocks:
#         obj = System.blocks[key]()
#         print "Working with", obj.type
#         if obj.language != "C":
#             print "-- Ignoring block", obj.type
#             continue
#         if obj.framework != "openCV":
#             print "-- Ignoring block", obj.type
#             continue
#
#         obj.x = 200
#         diagram = DiagramModel()
#         diagram.set_file_name("/tmp/" + obj.get_description()["Label"] +
#         ".hrp")
#         diagram.add_block(obj)
#
#         cont = 0
#         intypes = obj.get_description()["InTypes"]
#         for inkey in intypes:
#             if intypes[inkey] == "HRP_IMAGE":
#                 block = System.blocks["harpia.plugins.C.openCV.imageFile"]()
#             elif intypes[inkey] == "HRP_INT":
#                 block = System.blocks["harpia.plugins.C.openCV.intValue"]()
#                 block.window_name = "My Image - " +
#                 obj.get_description()["Label"]
#                 block.label = block.label + " - " + str(cont)
#             elif intypes[inkey] == "HRP_DOUBLE":
#                 block = System.blocks["harpia.plugins.C.openCV.newDouble"]()
#             elif intypes[inkey] == "HRP_RECT":
#                 block = System.blocks["harpia.plugins.C.openCV.newRect"]()
#             elif intypes[inkey] == "HRP_POINT":
#                 block = System.blocks["harpia.plugins.C.openCV.newPoint"]()
#             diagram.add_block(block)
#             block.y = 100 * cont
#             diagram.connect_blocks(block, 0, obj, cont)
#             cont = cont + 1
#
#         cont = 0
#         outtypes = obj.get_description()["OutTypes"]
#         for outkey in outtypes:
#             if outtypes[outkey] == "HRP_IMAGE":
#                 show = System.blocks["harpia.plugins.C.openCV.show"]()
#                 show.x = 400
#                 show.title = "My Image - " + obj.get_description()["Label"]
#                 diagram.add_block(show)
#                 diagram.connect_blocks(obj, cont, show, 0)
#             cont = cont + 1
#
#         try:
#             obj.get_help()
#         except:
#             print "Error in get_help() of object",
#             obj.get_description()["Label"] , obj.__class__
#
#         if args.examples:
#             # Save Examples
#             diagram.set_file_name("/tmp/" +
#             obj.get_description()["Label"] + ".hrp")
#             print "Generating", diagram.get_file_name(), "file"
#             control = DiagramControl(diagram)
#             control.save()
#
#         if args.compile:
#             # Compile Examples
#             print "Generating code..."
#             generator = CGenerator(diagram)
#             generator.compile()
# #            generator.execute()
#             print obj.get_description()["Label"], " - compiled\n"
#
#         if args.test:
#             #Test examples
#             #print "\n\nTesting code: ",
#             #print "\n", obj.get_description()["Label"], " ",
#             #print "Help",
#             #print "\tGenerate",
#             #print"\tDescription\tProperties "
#             #-----------------------
#             if obj.get_help():
#                 print WARNING + "  V\t" + ENDC,
#             else:
#                 print "  -\t",
#             #-----------------------
#
#             #-----------------------
#             #if obj.generate:
#             #    print "  V\t",
#             #else:
#             print "  -\t",
#             #-----------------------
#
#             #-----------------------
#             if obj.get_description():
#                 print WARNING + "     V\t\t" + ENDC,
#             else:
#                 print "     -\t\t",
#             #-----------------------
#
#             #-----------------------
#             if obj.get_properties():
#                 print WARNING + "    V\t" + ENDC,
#             else:
#                 print "    -\t",
#             #----------------------
#             print "\t", obj.get_description()["Label"], " "
#
#         #print obj.get_help()
#     print
#
#     ##-----------------------------------

    if args.file:
        for arg in args.file:
            win.main_control.open(arg)
    else:
        win.main_control.new()

    # to kill with Terminal Ctrl+C
    import signal
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    Gtk.main()
    # ----------------------------------------------------------------------

if __name__ == '__main__':
    main(sys.argv)

    # ----------------------------------------------------------------------
